1. Alternating colours for each row
2. Side panel to show summary
3. Ability to update data in the row itself
4. Validation of date to ensure it is not in the future
5. Ability to search all data
6. Different colours for rhesus
7. Proper validation when adding / editing records of inputs

1. Positive shows red, negative green
2. Show Day in the General search
3. Add General search
4. Add css colors for days and rhesus
5. Add Summary table to display summary
6. Update database path for dev and production
7. Add menu to add new worksheet and general search of worksheet
8. Add options to add mulitple rows to the daily worksheet
9. add option to save multiple rows to the daily worksheet
10. Add new buttons to Daily worksheet
11. To add new records, make sure date has not been added already
12. Prevent selection of future date for new worksheet
13. Change Sidebar color to a lighter one
14. Increase default size of window
15. Hide update buttons when last row is deleted manually in the daily worksheet
16. Select date range
17. Include flatpickr for date range selection

18. Switch between light and dark mode effortlessly
19. Save backup, restore backup and see all backups

1. Add advance menu and page
2. Implement backup (backup, restore backup and open backup dir)
3. Add ability to open database with SQLite studio from clicking a menu
4. Add config to handle settings storage etc.
5. Add config to store the path of SQLiteStudio
6. Config for theme and fontsize


1. Positive shows red, negative green
2. Show Day in the General search
3. Add General search
4. Add css colors for days and rhesus


Patient Modal
"Patient Details" Modal Content: Displays the patient’s name, blood group, and LHIMS number.
"Close" Button: Closes the modal when clicked.
"Search" Button: Executes a placeholder search action (an alert here, but you can replace this with actual search logic).
Outside Click: Clicking outside the modal also closes it.





Add alternating colors for each row
Add option to add 2 or 5 rows in the new work-sheet form
Use different colors for Rhesus positive and negative
Create a side panel to give summary of blood groups


a. Would you like assistance in handling database backups or migrations in the future?
b. Do you want to log or inspect database records using a tool like SQLite Browser to manually view the data?


1. Add python script.
2. Create python env and activate it
3. Add export to excel button and functionality
4. Fetch data from new worksheet from lhims
5. As you type in input, gives possible results in list
User types at least three characters in the dynamically created input field.
A dropdown list of matching names appears below the input field.
The user clicks on a suggestion, which populates the input field and hides the dropdown.
Hidden Field: Each row has a hidden <input> field to store the id of the selected name.
Auto-Suggest Modification: The id from the selected item is stored in the hidden field.
Retrieving Data for Database Insertion: When saving, you can easily access the name and id values from each row.
Add modal to show patient details
Clicking on any input field in the formTable marks it as the active input.
Clicking on a row in the dataTable populates the active input field with the row's name.
This behavior dynamically applies to all input fields within the formTable.



Get data from the server for a particular day, show only names and id number side by side w
with data from our database with only name for a particular day, use these names to assign the data in database
then update the data in the database


Add options in advance to read and update python script
Add options to read and update config.js, if error is in the config file don't overwrite


Highlighting the Selected Row: When you click a row in either table, it gets highlighted to show it's active.
Clicking to Reconcile: After selecting a row in each table, clicking a "Reconcile" button will:
Move the id and name data from the scraped data table to the database table.
Remove the selected row from the scraped data table.
Updating the Database Table: Add the reconciled data (ID and name) to the last column in the database table.
Let’s break down the implementation.

Selecting Rows: When a row is clicked, it highlights, and we store the selected row.
Reconciliation Logic: When you click the "Reconcile" button, it:
Copies the ID and name from the scraped data to the selected row in the database table.
Deletes the selected row from the scraped data table.


Scrapes data from the URL


To implement session storage for the username and password, here's the approach:

Requirements:
Store the username and password for 4 hours.
Delete the stored session data when the app quits.

